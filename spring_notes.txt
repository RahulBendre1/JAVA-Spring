1-2 : Concept
	Description
		When object A needs objects B & C -> A depends on B & C
			1 : A directly creates B & C
			2 : B & C are created in advance somewhere(IOC container) then injected/inserted(DI method) into A
	DI : Dependency Injection (의존성 주입)
	IOC Container
		IOC(Inversion of Control) container, spring container, bean container
	Spring : DI + IOC
		group of libraries that create and assemble logic parts
		
3-4 : DI, Spring setting & setter method
	Class : create required classes, must have setters for fields
		private Calculator calculator;
		private int firstNum;
		private int secondNum;
		public void setCalculator(Calculator calculator) {this.calculator = calculator;}
		public void setFirstNum(int firstNum) {this.firstNum = firstNum;}
		public void setSecondNum(int secondNum) {this.secondNum = secondNum;}
	Bean : create & setup IOC container via config file
		add required classes as bean to IOC container, set properties, variable naming IS important
		1. create spring bean configuration file
			src/main/resource : applicationCTX.xml
		2. add class as bean
			<bean id="calculator" class="kr.co.iamtek.Calculator" />
		3. add properties via setters
			<bean ...>
				<property name="calculator" ref="calculator" />
				<property name="firstNum" value="10" />
				<property name="secondNum" value="2" />
			</bean>
	Use : get required class instances as beans from IOC container
		String configLocation1 = "classpath:applicationCTX1.xml";
		String configLocation2 = "classpath:applicationCTX2.xml";
		AbstractApplicationContext ctx = new GenericXmlApplicationContext(configLocation1, configLocation2..);
		MyCalculator myCalculator = ctx.getBean("myCalculator", MyCalculator.class);
		ctx : IOC container
		getBean : get the required bean(class instance) for use

5 : DI
	constructor method
		Class : create required classes, must have constructor with fields
			private String name;private String gender;private String age;private String job;
			public Person(String name, String gender, String age, String job) {}
		Bean : Add bean properties via constructor (instead of setters)
			<bean id="person2" class="kr.co.iamtek.Person">
				<constructor-arg>
					<value>김성규</value>
				</constructor-arg>
				<constructor-arg value="남성" />
			</bean>
			<bean id="personInfo1" class="kr.co.iamtek.PersonInfo">
				<constructor-arg>
					<ref bean="person1"/>
				</constructor-arg>
			</bean>
			<bean id="personInfo2" class="kr.co.iamtek.PersonInfo">
				<constructor-arg ref="person2" />
			</bean>
	DI advantages
		one can change the behavior of an application using the bean config file with no java code change
		
6 : DI, setting methods
	XML (recommended)
		0. bean config
			String config1 = "classpath:beanContainerConfig1.xml";
			String config2 = "classpath:beanContainerConfig2.xml";
			AbstractApplicationContext container = new GenericXmlApplicationContext(config1, config2);
		1. property, constructor method
			<bean id="student1" class="kr.co.iamtek.Student">
				<constructor-arg value=" 홍길동"/>							: constructor, primitive
				<constructor-arg  value="10"/>
				<constructor-arg>													: constructor, object
					<list>
						<value>수영</value>
						<value>요리</value>
					</list>
				</constructor-arg>
				<property name="height">										: setter, primitive
					<value>187</value>
				</property>
				<property name="weight" value="84" />
			</bean>
			<bean id="studentInfo1" class="kr.co.iamtek.StudentInfo">
				<property name="student">										:setter, object
					<ref bean="student1"/>
				</property>
			</bean>
		2. namespace method (register c p first) 
			<bean id="family" class="kr.co.iamtek.Familiy" c:papaName="홍아빠" c:mamaName="홍마마" p:brotherName="홍언니">
				<property name="brotherName" value="홍오빠"/>
			</bean>
	JAVA only
		0. bean config
			AbstractApplicationContext ctx = new AnnotationConfigApplicationContext(ApplicationCTX.class);
		1. container class, ApplicationCTX.java
			Create a class where method returns object, with annotation at class and methods
			@Configuration
			public class ApplicationCTX {
				@Bean
				public Student student1() {
					return student;
				}
				@Bean
				public Student student2() {
					return student;
				}
			}
		
	XML + JAVA