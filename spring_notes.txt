[Seoul Wiz]

1-2. Concept
	Description
		When object A needs objects B & C -> A depends on B & C
			1 : A directly creates B & C
			2 : B & C are created in advance somewhere(IOC container) then injected/inserted(DI method) into A
	DI : Dependency Injection (의존성 주입)
	IOC Container
		IOC(Inversion of Control) container, spring container, bean container
	Spring : DI + IOC
		group of libraries that create and assemble logic parts
		
3-4. DI, Spring setting & setter method
	Class : create required classes, must have setters for fields
		private Calculator calculator;
		private int firstNum;
		private int secondNum;
		public void setCalculator(Calculator calculator) {this.calculator = calculator;}
		public void setFirstNum(int firstNum) {this.firstNum = firstNum;}
		public void setSecondNum(int secondNum) {this.secondNum = secondNum;}
	Bean : create & setup IOC container via config file
		add required classes as bean to IOC container, set properties, variable naming IS important
		1. create spring bean configuration file
			src/main/resource : applicationCTX.xml
		2. add class as bean
			<bean id="calculator" class="kr.co.iamtek.Calculator" />
		3. add properties via setters
			<bean ...>
				<property name="calculator" ref="calculator" />
				<property name="firstNum" value="10" />
				<property name="secondNum" value="2" />
			</bean>
	Use : get required class instances as beans from IOC container
		String configLocation1 = "classpath:applicationCTX1.xml";
		String configLocation2 = "classpath:applicationCTX2.xml";
		AbstractApplicationContext ctx = new GenericXmlApplicationContext(configLocation1, configLocation2..);
		MyCalculator myCalculator = ctx.getBean("myCalculator", MyCalculator.class);
		ctx : IOC container
		getBean : get the required bean(class instance) for use

5. DI
	constructor method
		Class : create required classes, must have constructor with fields
			private String name;private String gender;private String age;private String job;
			public Person(String name, String gender, String age, String job) {}
		Bean : Add bean properties via constructor (instead of setters)
			<bean id="person2" class="kr.co.iamtek.Person">
				<constructor-arg>
					<value>김성규</value>
				</constructor-arg>
				<constructor-arg value="남성" />
			</bean>
			<bean id="personInfo1" class="kr.co.iamtek.PersonInfo">
				<constructor-arg>
					<ref bean="person1"/>
				</constructor-arg>
			</bean>
			<bean id="personInfo2" class="kr.co.iamtek.PersonInfo">
				<constructor-arg ref="person2" />
			</bean>
	DI advantages
		one can change the behavior of an application using the bean config file with no java code change
		
6. DI, setting methods
	XML (recommended)
		1. Class
		2.1 Bean : property+constructor method, applicationCTX.xml
			<bean id="student1" class="kr.co.iamtek.Student">
				<constructor-arg value=" 홍길동"/>							: constructor, primitive
				<constructor-arg  value="10"/>
				<constructor-arg>													: constructor, object
					<list>
						<value>수영</value>
						<value>요리</value>
					</list>
				</constructor-arg>
				<property name="height">										: setter, primitive
					<value>187</value>
				</property>
				<property name="weight" value="84" />
			</bean>
			<bean id="studentInfo1" class="kr.co.iamtek.StudentInfo">
				<property name="student">										:setter, object
					<ref bean="student1"/>
				</property>
			</bean>
		2.2. namespace method (register c p first), applicationCTX.xml 
			<bean id="family" class="kr.co.iamtek.Familiy" c:papaName="홍아빠" c:mamaName="홍마마" p:brotherName="홍언니">
				<property name="brotherName" value="홍오빠"/>
			</bean>
		3. Use, Main.class
			String config = "classpath:applicationCTX.xml";
			AbstractApplicationContext ctx = new GenericXmlApplicationContext(config);
	JAVA only
		1. Class
		2. Bean : ApplicationCTX.java
			Create a class where method returns object, with annotation at class and methods
			@Configuration
			public class ApplicationCTX {
				@Bean
				public Student student1() {
					return student;
				}
				@Bean
				public Student student2() {
					return student;
				}
			}
		3. Use, Main.class
			AbstractApplicationContext ctx = new AnnotationConfigApplicationContext(ApplicationCTX.class);
	XML+ JAVA mixed
		1. Class
		2.1.Bean : XML (+ JAVA)
			ApplicationCTX.java : create DI class
			applicationCTX.xml : create DI xml, import java DI
				namespace : add context
				<context:annotation-config />
				<bean class="kr.co.iamtek.ApplicationCTX" />
		2.2 Bean : JAVA (+ XML)
			applicationCTX.xml : create DI xml
			ApplicationCTX.java : create DI class, import DI xml
				@ImportResource("classpath:applicationCTX.xml")
		3.1 Use, XML (+ JAVA), Main.class
			String config1 = "classpath:applicationCTX.xml";
			AbstractApplicationContext ctx = new GenericXmlApplicationContext(config1);
		3.2 Use, JAVA (+ XML), Main.class
			AbstractApplicationContext ctx = new AnnotationConfigApplicationContext(ApplicationCTX.class);

7. Life cycle & Scope
	Spring container life cycle
		Create
			GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
		Set
			ctx.load("classpath:applicationCTX.xml");
			ctx.refresh();
		Use
			Student student = ctx.getBean("student", Student.class);
			...
		Destroy
			ctx.close();
	Spring bean life cycle
		Interface
			start : implement InitializingBean, override afterPropertiesSet()
			end : implement DisposableBean, override destroy()
		Annotation
			applicationCTX.xml : <context:annotation-config />
			start method : @PostConstruct
			end method :  @PreDestroy
	Spring bean scope
	
8. Importing bean settings
	Environment Object : import settings from environment
		Objects
			ctx1 = new GenericXmlApplicationContext();
			env = ctx1.getEnvironment();
			psrc= env.getPropertySources();
		Set, adding to environment
			psrc.addLast()
		Get, getting from environment
			env.getProperty()
	Property file : import settings directly from file
		Setting files : add to resources
		XML : applicationCTX.xml
			Namespaces : add context 
				<context:property-placeholder location="classpath:admin.properties, classpath:subadmin.properties"/>
			Property : import property values from setting files
				<bean id="adminConnection" class="kr.co.iamtek.AdminConnection">
					<property name="adminId" value="${admin.id}" />
				</bean>
		JAVA : applicationCTX.java
			1. Get location of setting files
				@Bean
				public static PropertySourcesPlaceholderConfigurer propertySources() {	};
			2. Import setting
				@Value("${admin.id}")
				private String adminId;
			3. Set Bean
				@Bean
				public AdminConnection adminConnection() {};
	Profile : import settings by selecting one from multiple bean config files
		XML
			1. Spring config files : ApplicationCTXDev.xml, ApplicationCTXRun.xml
				add profile to <beans> : <beans profile="dev.">
			2. Main class
				Profile value : config = "dev" or "run"
				GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
				ctx.getEnvironment().setActiveProfiles(config);   <- before loading container setting
				ctx.load("classpath:ApplicationCTXDev.xml", "classpath:ApplicationCTXRun.xml");
		JAVA
			1. Annotated config classes : ApplicationCTXDev.java, ApplicationCTXRun.java
				add profile annotation to class : @Profile("dev")
			2. Main class
				Profile value : config = "dev" or "run"
				AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
				ctx.getEnvironment().setActiveProfiles(config);
				ctx.register(ApplicationCTXDev.class, ApplicationCTXRun.class);
				
9-10. AOP, Aspect Oriented Programming
	Concept : Divide code into core and common process, apply common process at core process as needed
		Common
			Aspect : Grouped set of common processes
			Advice : each common process in an Aspect
		Core
			Joinpoint : core process where Advices(common processes) are inserted/applied (Spring : methods only)
			Pointcut : exact point of Jointpoint(core process) where an Advice is applied
		Weaving : application itself
	Description
		Spring framework
			Joinpoint can only be methods, uses proxy method
			Application
				1. POM.XML : Set dependencies
					<dependency>
						<groupId>org.aspectj</groupId>
						<artifactId>aspectjweaver</artifactId>
						<version>1.7.4</version>
					</dependency>
				2. XML Schema, Annotation
		Advice types : <aop:around>, @Around
			Before : runs advice before method
			AfterReturning : after method only without exception
			AfterThrowing : after method only with exception
			After : after method regardless of exception
			Around : runs advice before and after method regardless of exception
		AspectJ Poincut Expression Language
			all : *		this : .		0+ : ..
			Scope
				execution : apply to methods, "execution(public void get*(..))"
				within : apply to package.class methods, "within(kr.co.iamtek.*)"
				bean : apply to bean methods, "bean(student)"
			Ex
				<aop:pointcut expression="within(kr.co.iamtek.*)" id="publicM"/>
				@Pointcut("within(kr.co.iamtek.*)")
			General
	Apply methods
		1. XML Schema
			Advice class : class for common process
				public class LogAop {
					public Object loggerAop(ProceedingJoinPoint joinPoint) throws Throwable {
						//before Pointcut
						String signitureStr = joinPoint.getSignature().toShortString();
						System.out.println(signitureStr + " started.");
						long st = System.currentTimeMillis();
						try {
							Object obj = joinPoint.proceed();
							return obj;
						} finally {
							//after Pointcut
							long et = System.currentTimeMillis();
							System.out.println(signitureStr + " ended, duration : "+ (et - st));
						}
					}
					public void beforeAdvice(JoinPoint joinPoint) {
						String signitureStr = joinPoint.getSignature().toShortString();
						System.out.println(signitureStr + " beforeAdvice()");
					}
				}
			Spring config file XML : Aspect settings
				Namespaces : add aop
				<bean id="logAop" class="kr.co.iamtek.LogAop" />
				<aop:config>
					<aop:aspect id="logger" ref="logAop">
						<aop:pointcut expression="within(kr.co.iamtek.*)" id="publicM"/>
						<aop:around pointcut-ref="publicM" method="loggerAop"/>
					</aop:aspect>
					<aop:aspect id="logger" ref="logAop">
						<aop:pointcut id="publicM" expression="within(kr.co.iamtek.*)"  />
						<aop:before pointcut-ref="publicM" method="beforeAdvice" />
					</aop:aspect>
				</aop:config>
		2. Annotation @Aspect
			Advice class with AOP annotation
				@Aspect
				public class LogAop {
					@Pointcut("within(kr.co.iamtek.*)")
					private void pointcutMethod() {
					}
					@Around("pointcutMethod()")		//using with @Pointcut
					public Object loggerAop(ProceedingJoinPoint joinPoint) throws Throwable {
						//before Pointcut
						try {
							Object obj = joinPoint.proceed();
							return obj;
						} finally {
							//after Pointcut
						}
					}
					@Before("within(kr.co.iamtek.*)")	//without @Pointcut
					public void beforeAdvice(JoinPoint joinPoint) {
						String signitureStr = joinPoint.getSignature().toShortString();
						System.out.println(signitureStr + " beforeAdvice()");
					}
				}
			Spring config file XML
				Namespaces : add aop
				<bean id="logAop" class="kr.co.iamtek.LogAop" />
				<aop:aspectj-autoproxy />

11. Spring MVC basics
	Overview
		1. DispatcherServlet(auto) -> Controller
		2. Controller <-> Model/ModelandView
		3. Controller -> View
	Structure
		root : src/main/webapp
		context : Package(p1.p2.p3.p4...)  p3 = context
		web.xml : src/main/webapp/WEB-INF/web.xml
			servlet setting & mapping, DispatcherServlet
			spring container setting file path
		servlet-context.xml : src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml
			spring container setting
			view file path
			resource folder path
			controller scan package
		DispatcherServlet
			gets client connection & pass it to controller
		controller : /src/main/java/package
		view : src/main/webapp/WEB-INF/views
	Resource folder
		path : src/main/webapp/resources
		new folder need to be registered in servlet-context.xml
			