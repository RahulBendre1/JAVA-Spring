[Java Brains]

01-03. Concept

    Interface
    Container
    Factory pattern
    Dependency Injection

04-10. Dependency Injection (XML configuration)

    04. Concept
        Register object to factory container, spring.xml (XML configuration)
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
            <beans>
                <bean id="triangle" class="com.iamtek.shapes.Triangle"/>
            </beans>
        Get object from container when needed
            ApplicationContext context = new ClassPathXmlApplicationContext("spring.xml");
            Triangle triangle = (Triangle) context.getBean("triangle");

    Injection Method
        05. Setter Method : Object have field with setter methods
            Object
                public class Triangle {
                    private String type;
                    public void setType(String type) {
                        this.type = type;
                    }
                    ...
                }
            Container
                <bean>
                    <property name="field name" value="field value" />
                </bean>
        06. Constructor Method : Object have constructors with fields
            Object
                public class Triangle {
                    private String type;
                    private int height;
                    public Triangle(String type, int height) {
                        this.type = type;
                        this.height = height;
                    }
                    ...
                }
            Container
                <bean>
                    <constructor-arg index="field position" type="field type" value="field value"/>
                </bean>

    07. Object Injection : Object have object as field members
        Object
            public class Triangle {
                private Point PointA;
                private Point PointB;
                private Point PointC;
                ...
            }
            public class Point {
                private int x;
                private int y;
                ...
            }
        Container
            <bean id="triangle" class="com.iamtek.objectinjection.Triangle">
                <property name="pointA" ref="pointZero"/>
            </bean>
            <bean id="pointZero" class="com.iamtek.objectinjection.Point">
                <property name="x" value="0"/>
                <property name="y" value="0"/>
            </bean>

    08. Inner Bean, Alias
        Inner Bean injection
            <bean id="triangle" class="com.iamtek.innerbean.Triangle">
                <property name="pointB">
                    <bean class="com.iamtek.innerbean.Point">
                        <property name="x" value="-25"/>
                        <property name="y" value="0"/>
                    </bean>
                </property>
            </bean>
        Bean Id, Name, Alias
            Id : must be unique(xml validate), can't use special characters
                Reference bean by id : <ref local="pointZero"/>
            Name : can have multiple within page, can use special character, no space
                <bean id="triangle" name="NameOfTriangle!" class="com.iamtek.innerbean.Triangle">
            Alias : assign name to bean
                <alias name="triangle" alias="[Alias Of Triangle!]"/>

    09. Collections : Object have collections object as field members
        Object
            public class Triangle {
                private List<Point> points;
                ...
            }
        Container
            <bean id="triangle" class="com.iamtek.collections.Triangle">
                <property name="points">
                    <list>
                        <ref local="pointZero"/>
                        <ref local="point2"/>
                        <ref local="point3"/>
                    </list>
                </property>
            </bean>

    10. Autowiring
        if bean name is same as member name can use autowire="byName"
        Manual wiring is recommended (clarity, debugging)
        Container
            <bean id="triangle" class="com.iamtek.autowire.Triangle" autowire="byName" />
            <bean id="pointA">...</bean>
            <bean id="pointB">...</bean>
            <bean id="pointC">...</bean>

11. Bean Scopes
    Singleton : Default, bean only created once per container at container initialization
    Prototype : New bean created with every request or reference
    Web-aware
        Request : New bean per servlet request
        Session : New bean per session
        Global Session : New bean per global HTTP session (portlet context)
    <bean scope="prototype"/>

12. Context Aware
    ApplicationContextAware interface : object gets container info
    BeanNameAware interface : object gets it's bean name

13. Bean Definition Inheritance
    <bean id="parenttriangle" class="com.iamtek.beandefinherit.Triangle">
        <property name="pointA" ref="pointA"/>
    </bean>
    <bean id="triangle1" class="com.iamtek.beandefinherit.Triangle" parent="parenttriangle">
        <property name="pointB" ref="pointB"/>
        <property name="pointC" ref="pointC"/>
    </bean>
    <bean id="parenttriangle2" class="com.iamtek.beandefinherit.Triangle2">
        <property name="points">
            <list>
                <ref bean="pointA"/>
            </list>
        </property>
    </bean>
    <bean id="parenttriangle2" class="com.iamtek.beandefinherit.Triangle2" abstract="true">
        <property name="points">
            <list merge="true">
                <ref bean="pointB"/>
                <ref bean="pointC"/>
            </list>
        </property>
    </bean>

14. Lifecycle Callbacks
    Spring
        InitializingBean : calls a method at bean creation
        DisposableBean : calls a method at bean destruction
    Custom
        For a bean : <bean init-method="..." destroy-method="...">
        For beans : <beans default-init-method="..." default-destroy-method="...">

15. BeanPostProcessor
    No BeanAfterProcessor
    Spring
        BeanPostProcessor
            Interface for creating custom BeanPostProcessor
            Calls methods before & after bean creation

16. BeanFactoryPostProcessor
    No BeanFactoryAfterProcessor
    Spring
        BeanFactoryPostProcessor
            Interface for creating custom BeanFactoryPostProcessor
            Calls methods at container creation
        PropertyPlaceholderConfigurer
            Used for editing spring config file, references other files
                <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
                    <property name="locations" value="pointsconfig.properties"/>
                </bean>

17. Coding To Interface
    Core concept of DI

18-21. Annotations
    XML setup
        <beans xmlns="http://www.springframework.org/schema/beans"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/context
                    http://www.springframework.org/schema/context/spring-context.xsd"
               xmlns:context="http://www.springframework.org/schema/context"/>
        <context:annotation-config/> : Allows use of annotations
        <context:component-scan base-package=""/> : Allows use of stereotypes
    Annotations (@Resource, @Component)
        18. @Required : Class dependency checker, container startup, use on setter
        19. @Autowired : auto DI
            <qualifier> gives error but works?
        20. JSR-250 : Java Specification Request annotations, (javax)
            @Resource : auto DI, better than @Autowired
            @PostConstruct, @Predestroy : bean lifecycle
        21. Stereotype Annotations
            @Component : general bean DI, only one bean per class unlike XML config
            @Service, @Repository, @Controller : bean DI with specific functions

22. MessageSource
    Concept
        Get text from property(outside) files, separates text from code, localization
    File
        mymessages.properties
    Container
        <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
            <property name="basenames">
                <list>
                    <value>mymessages</value>
                    ...
                </list></property></bean>
    App
        messageSource.getMessage();

23. Event Handling
    Concept
        Publisher creates events, listener detects events
    ApplicationListener
        Event listener interface, implemented to class processing events
    ApplicationEvent
        Event object, can make custom event by inheritance
    ApplicationEventPublisherAware
        Event publisher interface, implemented to class firing events

24-35. AOP

    Concept : Aspect Oriented Programming
        Separate common code/process from core, take out cross concerning processes as aspects
        Configure where aspects apply, existing code don't have to call these processes separately

    Structure
        Advice : A common process with cross concerning nature
            Don't work on aspect class members
            Don't work during container initialization
        Aspect : Class consisting of advices
        Jointpoint
            Possible target in the existing code where an aspect can be applied
        Pointcut
            Means of selecting joinpoint for aspect application
            Dummy aspect class method with aspect's target info

    Setup
        Library : add maven dependency
            <dependency>
              <groupId>org.aspectj</groupId>
              <artifactId>aspectjweaver</artifactId>
              <version>1.8.9</version>
            </dependency>
        Spring container : add aop namespace to spring container, register aop autoproxy
            <beans xmlns="http://www.springframework.org/schema/beans"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns:aop="http://www.springframework.org/schema/aop"
                   xmlns:context="http://www.springframework.org/schema/context"
                   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
                <aop:aspectj-autoproxy/>
            </beans>
        Aspect class
            @Aspect
            public class LoggingAspect {
                advice methods...
            }
        Advice method
            @Before("pointcut expression or method")
            public void loggingAdvice(){
                common process...
            }
        Pointcut method
            @Pointcut("pointcut expression")
            public void allGetters(){
            }
        Pointcut expression
            execution(* get*(..))

    Application
        Advice to different points : method with wildcard pointcut or pointcut combinations
        Different advices to one point : different advice methods at same pointcut

    Pointcut expression
        Type
            execution() : targets are method
            within() : targets are class
            args() : targets are methods of argument signature
        Combination
            pointcut1 OR pointcut2, pc1 AND pc2
        Wildcard : @Before("execution(* com.iamtek.*.get*(..))")
            any access modifier, not mentioned
            any return type
            any class in com.iamtek package
            method starts with get
            parameter number zero or above, (*) one or above, () none

    JoinPoint
        Has info of joinpoint
        @Before("...")
        public void myAdvice1(JoinPoint joinPoint){
            Triangle triangle = (Triangle) joinPoint.getTarget();
            ...
        }

    Advice Type
        Guide : use minimum
        @Before : aspect executes before target
        @After... : aspect executes after target
            @After : all the time (finally)
            @AfterReturning : on return without exception, can get returned object
                @AfterReturning(pointcut = "...", returning = "returnValue")
                public void myAdvice4(String returnValue){
                    System.out.println("@AfterReturning Advice, return = "+ returnValue);
                }
            @AfterThrowing : on exception, can get exception object
                @AfterThrowing(pointcut = "...", throwing = "exceptionValue")
                public void myAdvice3(Exception exceptionValue){
                    System.out.println("@AfterThrowing Advice, exception =" + exceptionValue);
                }
        @Around : aspect executes around target
            @Around("allGet()")
            public Object myAdvice1(ProceedingJoinPoint joinPoint) {
                Object obj = null;
                try {
                    System.out.println("@Around Advice: Before");
                    obj = joinPoint.proceed();
                    System.out.println("@Around Advice: AfterReturning");
                } catch (Throwable throwable) {
                    System.out.println("@Around Advice: AfterThrowing");
                } finally {
                    System.out.println("@Around Advice: After");
                    return obj;
                }
            }

    Custom Advice Annotation
        Concept
            A dummy annotation acts as pointcut for aspect to be applied
            Add the annotation to anyplace where aspect is needed
        Dummy annotation
            public @interface CustomAdvice {}
        Advice
            @Around("@annotation(com.iamtek.customadvice.CustomAdvice)")

    XML AOP Configuration
        Need
            Legacy aop codes are done in XML
            Use AOP as configuration
        Configuration
            Done in container within <aop:config>
            @Aspect : <aop:aspect>
            @Pointcut : <aop:pointcut>
            @Around : <aop:around>
        Eg
            <aop:config>
                <aop:aspect id="myAspect" ref="myAspect">
                    <aop:pointcut id="allGet" expression="execution(* get*())"/>
                    <aop:around pointcut-ref="allGet" method="myAdvice1"/>
                    <!--<aop:around pointcut="execution(* get*())" method="myAdvice1"/>-->
                </aop:aspect>
            </aop:config>

    AOP Proxy
