[Java Brains]

01-03. Concept

    Interface
    Container
    Factory pattern
    Dependency Injection

04-10. Dependency Injection (XML configuration)

    04. Concept
        Register object to factory container, spring.xml (XML configuration)
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
            <beans>
                <bean id="triangle" class="com.iamtek.shapes.Triangle"/>
            </beans>
        Get object from container when needed
            ApplicationContext context = new ClassPathXmlApplicationContext("spring.xml");
            Triangle triangle = (Triangle) context.getBean("triangle");

    Injection Method
        05. Setter Method : Object have field with setter methods
            Object
                public class Triangle {
                    private String type;
                    public void setType(String type) {
                        this.type = type;
                    }
                    ...
                }
            Container
                <bean>
                    <property name="field name" value="field value" />
                </bean>
        06. Constructor Method : Object have constructors with fields
            Object
                public class Triangle {
                    private String type;
                    private int height;
                    public Triangle(String type, int height) {
                        this.type = type;
                        this.height = height;
                    }
                    ...
                }
            Container
                <bean>
                    <constructor-arg index="field position" type="field type" value="field value"/>
                </bean>

    07. Object Injection : Object have object as field members
        Object
            public class Triangle {
                private Point PointA;
                private Point PointB;
                private Point PointC;
                ...
            }
            public class Point {
                private int x;
                private int y;
                ...
            }
        Container
            <bean id="triangle" class="com.iamtek.objectinjection.Triangle">
                <property name="pointA" ref="pointZero"/>
            </bean>
            <bean id="pointZero" class="com.iamtek.objectinjection.Point">
                <property name="x" value="0"/>
                <property name="y" value="0"/>
            </bean>

    08. Inner Bean, Alias
        Inner Bean injection
            <bean id="triangle" class="com.iamtek.innerbean.Triangle">
                <property name="pointB">
                    <bean class="com.iamtek.innerbean.Point">
                        <property name="x" value="-25"/>
                        <property name="y" value="0"/>
                    </bean>
                </property>
            </bean>
        Bean Id, Name, Alias
            Id : must be unique(xml validate), can't use special characters
                Reference bean by id : <ref local="pointZero"/>
            Name : can have multiple within page, can use special character, no space
                <bean id="triangle" name="NameOfTriangle!" class="com.iamtek.innerbean.Triangle">
            Alias : assign name to bean
                <alias name="triangle" alias="[Alias Of Triangle!]"/>

    09. Collections : Object have collections object as field members
        Object
            public class Triangle {
                private List<Point> points;
                ...
            }
        Container
            <bean id="triangle" class="com.iamtek.collections.Triangle">
                <property name="points">
                    <list>
                        <ref local="pointZero"/>
                        <ref local="point2"/>
                        <ref local="point3"/>
                    </list>
                </property>
            </bean>

    10. Autowiring
        if bean name is same as member name can use autowire="byName"
        Manual wiring is recommended (clarity, debugging)
        Container
            <bean id="triangle" class="com.iamtek.autowire.Triangle" autowire="byName" />
            <bean id="pointA">...</bean>
            <bean id="pointB">...</bean>
            <bean id="pointC">...</bean>

11. Bean Scopes
    Singleton : Default, bean only created once per container at container initialization
    Prototype : New bean created with every request or reference
    Web-aware
        Request : New bean per servlet request
        Session : New bean per session
        Global Session : New bean per global HTTP session (portlet context)
    <bean scope="prototype"/>

12. Context Aware
    ApplicationContextAware interface : object gets container info
    BeanNameAware interface : object gets it's bean name

13. Bean Definition Inheritance
    <bean id="parenttriangle" class="com.iamtek.beandefinherit.Triangle">
        <property name="pointA" ref="pointA"/>
    </bean>
    <bean id="triangle1" class="com.iamtek.beandefinherit.Triangle" parent="parenttriangle">
        <property name="pointB" ref="pointB"/>
        <property name="pointC" ref="pointC"/>
    </bean>
    <bean id="parenttriangle2" class="com.iamtek.beandefinherit.Triangle2">
        <property name="points">
            <list>
                <ref bean="pointA"/>
            </list>
        </property>
    </bean>
    <bean id="parenttriangle2" class="com.iamtek.beandefinherit.Triangle2" abstract="true">
        <property name="points">
            <list merge="true">
                <ref bean="pointB"/>
                <ref bean="pointC"/>
            </list>
        </property>
    </bean>

14. Lifecycle Callbacks
    Spring
        InitializingBean : calls a method at bean creation
        DisposableBean : calls a method at bean destruction
    Custom
        For a bean : <bean init-method="..." destroy-method="...">
        For beans : <beans default-init-method="..." default-destroy-method="...">
15. BeanPostProcessor
    No BeanAfterProcessor
    Spring
        BeanPostProcessor
            Interface for creating custom BeanPostProcessor
            Calls methods before & after bean creation
16. BeanFactoryPostProcessor
    No BeanFactoryAfterProcessor
    Spring
        BeanFactoryPostProcessor
            Interface for creating custom BeanFactoryPostProcessor
            Calls methods at container creation
        PropertyPlaceholderConfigurer
            Used for editing spring config file, references other files
                <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
                    <property name="locations" value="pointsconfig.properties"/>
                </bean>
17. Coding To Interface
    Core concept of DI

18-21. Annotations
    XML setup
        <beans xmlns="http://www.springframework.org/schema/beans"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/context
                    http://www.springframework.org/schema/context/spring-context.xsd"
               xmlns:context="http://www.springframework.org/schema/context"/>
        <context:annotation-config/> : Allows use of annotations
        <context:component-scan base-package=""/> : Allows use of stereotypes
    Annotations (@Resource, @Component)
        18. @Required : Class dependency checker, container startup, use on setter
        19. @Autowired : auto DI
            <qualifier> gives error but works?
        20. JSR-250 : Java Specification Request annotations, (javax)
            @Resource : auto DI, better than @Autowired
            @PostConstruct, @Predestroy : bean lifecycle
        21. Stereotype Annotations
            @Component : general bean DI, only one bean per class unlike XML config
            @Service, @Repository, @Controller : bean DI with specific functions

22. MessageSource
    Concept
        Get text from property(outside) files, separates text from code, localization
    File
        mymessages.properties
    Container
        <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
            <property name="basenames">
                <list>
                    <value>mymessages</value>
                    ...
                </list></property></bean>
    App
        messageSource.getMessage();